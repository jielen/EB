package com.ufgov.gk.common.ebay.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.ufgov.gk.common.commonbiz.model.BaseBill;

public class EbCategoryExample extends BaseBill {
  /**
   * This field was generated by Abator for iBATIS.
   * This field corresponds to the database table EB_CATEGORY
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  protected String orderByClause;

  /**
   * This field was generated by Abator for iBATIS.
   * This field corresponds to the database table EB_CATEGORY
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  protected List oredCriteria;

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_CATEGORY
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public EbCategoryExample() {
    oredCriteria = new ArrayList();
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_CATEGORY
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  protected EbCategoryExample(EbCategoryExample example) {
    this.orderByClause = example.orderByClause;
    this.oredCriteria = example.oredCriteria;
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_CATEGORY
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public void setOrderByClause(String orderByClause) {
    this.orderByClause = orderByClause;
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_CATEGORY
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public String getOrderByClause() {
    return orderByClause;
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_CATEGORY
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public List getOredCriteria() {
    return oredCriteria;
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_CATEGORY
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public void or(Criteria criteria) {
    oredCriteria.add(criteria);
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_CATEGORY
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public Criteria createCriteria() {
    Criteria criteria = createCriteriaInternal();
    if (oredCriteria.size() == 0) {
      oredCriteria.add(criteria);
    }
    return criteria;
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_CATEGORY
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  protected Criteria createCriteriaInternal() {
    Criteria criteria = new Criteria();
    return criteria;
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_CATEGORY
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public void clear() {
    oredCriteria.clear();
  }

  /**
   * This class was generated by Abator for iBATIS.
   * This class corresponds to the database table EB_CATEGORY
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public static class Criteria {
    protected List criteriaWithoutValue;

    protected List criteriaWithSingleValue;

    protected List criteriaWithListValue;

    protected List criteriaWithBetweenValue;

    protected Criteria() {
      super();
      criteriaWithoutValue = new ArrayList();
      criteriaWithSingleValue = new ArrayList();
      criteriaWithListValue = new ArrayList();
      criteriaWithBetweenValue = new ArrayList();
    }

    public boolean isValid() {
      return criteriaWithoutValue.size() > 0 || criteriaWithSingleValue.size() > 0 || criteriaWithListValue.size() > 0
        || criteriaWithBetweenValue.size() > 0;
    }

    public List getCriteriaWithoutValue() {
      return criteriaWithoutValue;
    }

    public List getCriteriaWithSingleValue() {
      return criteriaWithSingleValue;
    }

    public List getCriteriaWithListValue() {
      return criteriaWithListValue;
    }

    public List getCriteriaWithBetweenValue() {
      return criteriaWithBetweenValue;
    }

    protected void addCriterion(String condition) {
      if (condition == null) {
        throw new RuntimeException("Value for condition cannot be null");
      }
      criteriaWithoutValue.add(condition);
    }

    protected void addCriterion(String condition, Object value, String property) {
      if (value == null) {
        throw new RuntimeException("Value for " + property + " cannot be null");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("value", value);
      criteriaWithSingleValue.add(map);
    }

    protected void addCriterion(String condition, List values, String property) {
      if (values == null || values.size() == 0) {
        throw new RuntimeException("Value list for " + property + " cannot be null or empty");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", values);
      criteriaWithListValue.add(map);
    }

    protected void addCriterion(String condition, Object value1, Object value2, String property) {
      if (value1 == null || value2 == null) {
        throw new RuntimeException("Between values for " + property + " cannot be null");
      }
      List list = new ArrayList();
      list.add(value1);
      list.add(value2);
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", list);
      criteriaWithBetweenValue.add(map);
    }

    public Criteria andCategoryIdIsNull() {
      addCriterion("CATEGORY_ID is null");
      return this;
    }

    public Criteria andCategoryIdIsNotNull() {
      addCriterion("CATEGORY_ID is not null");
      return this;
    }

    public Criteria andCategoryIdEqualTo(String value) {
      addCriterion("CATEGORY_ID =", value, "categoryId");
      return this;
    }

    public Criteria andCategoryIdNotEqualTo(String value) {
      addCriterion("CATEGORY_ID <>", value, "categoryId");
      return this;
    }

    public Criteria andCategoryIdGreaterThan(String value) {
      addCriterion("CATEGORY_ID >", value, "categoryId");
      return this;
    }

    public Criteria andCategoryIdGreaterThanOrEqualTo(String value) {
      addCriterion("CATEGORY_ID >=", value, "categoryId");
      return this;
    }

    public Criteria andCategoryIdLessThan(String value) {
      addCriterion("CATEGORY_ID <", value, "categoryId");
      return this;
    }

    public Criteria andCategoryIdLessThanOrEqualTo(String value) {
      addCriterion("CATEGORY_ID <=", value, "categoryId");
      return this;
    }

    public Criteria andCategoryIdLike(String value) {
      addCriterion("CATEGORY_ID like", value, "categoryId");
      return this;
    }

    public Criteria andCategoryIdNotLike(String value) {
      addCriterion("CATEGORY_ID not like", value, "categoryId");
      return this;
    }

    public Criteria andCategoryIdIn(List values) {
      addCriterion("CATEGORY_ID in", values, "categoryId");
      return this;
    }

    public Criteria andCategoryIdNotIn(List values) {
      addCriterion("CATEGORY_ID not in", values, "categoryId");
      return this;
    }

    public Criteria andCategoryIdBetween(String value1, String value2) {
      addCriterion("CATEGORY_ID between", value1, value2, "categoryId");
      return this;
    }

    public Criteria andCategoryIdNotBetween(String value1, String value2) {
      addCriterion("CATEGORY_ID not between", value1, value2, "categoryId");
      return this;
    }

    public Criteria andCategoryNameIsNull() {
      addCriterion("CATEGORY_NAME is null");
      return this;
    }

    public Criteria andCategoryNameIsNotNull() {
      addCriterion("CATEGORY_NAME is not null");
      return this;
    }

    public Criteria andCategoryNameEqualTo(String value) {
      addCriterion("CATEGORY_NAME =", value, "categoryName");
      return this;
    }

    public Criteria andCategoryNameNotEqualTo(String value) {
      addCriterion("CATEGORY_NAME <>", value, "categoryName");
      return this;
    }

    public Criteria andCategoryNameGreaterThan(String value) {
      addCriterion("CATEGORY_NAME >", value, "categoryName");
      return this;
    }

    public Criteria andCategoryNameGreaterThanOrEqualTo(String value) {
      addCriterion("CATEGORY_NAME >=", value, "categoryName");
      return this;
    }

    public Criteria andCategoryNameLessThan(String value) {
      addCriterion("CATEGORY_NAME <", value, "categoryName");
      return this;
    }

    public Criteria andCategoryNameLessThanOrEqualTo(String value) {
      addCriterion("CATEGORY_NAME <=", value, "categoryName");
      return this;
    }

    public Criteria andCategoryNameLike(String value) {
      addCriterion("CATEGORY_NAME like", value, "categoryName");
      return this;
    }

    public Criteria andCategoryNameNotLike(String value) {
      addCriterion("CATEGORY_NAME not like", value, "categoryName");
      return this;
    }

    public Criteria andCategoryNameIn(List values) {
      addCriterion("CATEGORY_NAME in", values, "categoryName");
      return this;
    }

    public Criteria andCategoryNameNotIn(List values) {
      addCriterion("CATEGORY_NAME not in", values, "categoryName");
      return this;
    }

    public Criteria andCategoryNameBetween(String value1, String value2) {
      addCriterion("CATEGORY_NAME between", value1, value2, "categoryName");
      return this;
    }

    public Criteria andCategoryNameNotBetween(String value1, String value2) {
      addCriterion("CATEGORY_NAME not between", value1, value2, "categoryName");
      return this;
    }

    public Criteria andParentIdIsNull() {
      addCriterion("PARENT_ID is null");
      return this;
    }

    public Criteria andParentIdIsNotNull() {
      addCriterion("PARENT_ID is not null");
      return this;
    }

    public Criteria andParentIdEqualTo(String value) {
      addCriterion("PARENT_ID =", value, "parentId");
      return this;
    }

    public Criteria andParentIdNotEqualTo(String value) {
      addCriterion("PARENT_ID <>", value, "parentId");
      return this;
    }

    public Criteria andParentIdGreaterThan(String value) {
      addCriterion("PARENT_ID >", value, "parentId");
      return this;
    }

    public Criteria andParentIdGreaterThanOrEqualTo(String value) {
      addCriterion("PARENT_ID >=", value, "parentId");
      return this;
    }

    public Criteria andParentIdLessThan(String value) {
      addCriterion("PARENT_ID <", value, "parentId");
      return this;
    }

    public Criteria andParentIdLessThanOrEqualTo(String value) {
      addCriterion("PARENT_ID <=", value, "parentId");
      return this;
    }

    public Criteria andParentIdLike(String value) {
      addCriterion("PARENT_ID like", value, "parentId");
      return this;
    }

    public Criteria andParentIdNotLike(String value) {
      addCriterion("PARENT_ID not like", value, "parentId");
      return this;
    }

    public Criteria andParentIdIn(List values) {
      addCriterion("PARENT_ID in", values, "parentId");
      return this;
    }

    public Criteria andParentIdNotIn(List values) {
      addCriterion("PARENT_ID not in", values, "parentId");
      return this;
    }

    public Criteria andParentIdBetween(String value1, String value2) {
      addCriterion("PARENT_ID between", value1, value2, "parentId");
      return this;
    }

    public Criteria andParentIdNotBetween(String value1, String value2) {
      addCriterion("PARENT_ID not between", value1, value2, "parentId");
      return this;
    }
  }
}