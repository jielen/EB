package com.ufgov.gk.common.ebay.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.ufgov.gk.common.commonbiz.model.BaseBill;

public class EbSellerGroupExample extends BaseBill {
  /**
   * This field was generated by Abator for iBATIS.
   * This field corresponds to the database table EB_SELLER_GROUP
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  protected String orderByClause;

  /**
   * This field was generated by Abator for iBATIS.
   * This field corresponds to the database table EB_SELLER_GROUP
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  protected List oredCriteria;

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_SELLER_GROUP
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public EbSellerGroupExample() {
    oredCriteria = new ArrayList();
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_SELLER_GROUP
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  protected EbSellerGroupExample(EbSellerGroupExample example) {
    this.orderByClause = example.orderByClause;
    this.oredCriteria = example.oredCriteria;
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_SELLER_GROUP
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public void setOrderByClause(String orderByClause) {
    this.orderByClause = orderByClause;
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_SELLER_GROUP
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public String getOrderByClause() {
    return orderByClause;
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_SELLER_GROUP
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public List getOredCriteria() {
    return oredCriteria;
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_SELLER_GROUP
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public void or(Criteria criteria) {
    oredCriteria.add(criteria);
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_SELLER_GROUP
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public Criteria createCriteria() {
    Criteria criteria = createCriteriaInternal();
    if (oredCriteria.size() == 0) {
      oredCriteria.add(criteria);
    }
    return criteria;
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_SELLER_GROUP
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  protected Criteria createCriteriaInternal() {
    Criteria criteria = new Criteria();
    return criteria;
  }

  /**
   * This method was generated by Abator for iBATIS.
   * This method corresponds to the database table EB_SELLER_GROUP
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public void clear() {
    oredCriteria.clear();
  }

  /**
   * This class was generated by Abator for iBATIS.
   * This class corresponds to the database table EB_SELLER_GROUP
   *
   * @abatorgenerated Sat Jun 23 08:51:07 CST 2012
   */
  public static class Criteria {
    protected List criteriaWithoutValue;

    protected List criteriaWithSingleValue;

    protected List criteriaWithListValue;

    protected List criteriaWithBetweenValue;

    protected Criteria() {
      super();
      criteriaWithoutValue = new ArrayList();
      criteriaWithSingleValue = new ArrayList();
      criteriaWithListValue = new ArrayList();
      criteriaWithBetweenValue = new ArrayList();
    }

    public boolean isValid() {
      return criteriaWithoutValue.size() > 0 || criteriaWithSingleValue.size() > 0 || criteriaWithListValue.size() > 0
        || criteriaWithBetweenValue.size() > 0;
    }

    public List getCriteriaWithoutValue() {
      return criteriaWithoutValue;
    }

    public List getCriteriaWithSingleValue() {
      return criteriaWithSingleValue;
    }

    public List getCriteriaWithListValue() {
      return criteriaWithListValue;
    }

    public List getCriteriaWithBetweenValue() {
      return criteriaWithBetweenValue;
    }

    protected void addCriterion(String condition) {
      if (condition == null) {
        throw new RuntimeException("Value for condition cannot be null");
      }
      criteriaWithoutValue.add(condition);
    }

    protected void addCriterion(String condition, Object value, String property) {
      if (value == null) {
        throw new RuntimeException("Value for " + property + " cannot be null");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("value", value);
      criteriaWithSingleValue.add(map);
    }

    protected void addCriterion(String condition, List values, String property) {
      if (values == null || values.size() == 0) {
        throw new RuntimeException("Value list for " + property + " cannot be null or empty");
      }
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", values);
      criteriaWithListValue.add(map);
    }

    protected void addCriterion(String condition, Object value1, Object value2, String property) {
      if (value1 == null || value2 == null) {
        throw new RuntimeException("Between values for " + property + " cannot be null");
      }
      List list = new ArrayList();
      list.add(value1);
      list.add(value2);
      Map map = new HashMap();
      map.put("condition", condition);
      map.put("values", list);
      criteriaWithBetweenValue.add(map);
    }

    public Criteria andGroupIdIsNull() {
      addCriterion("GROUP_ID is null");
      return this;
    }

    public Criteria andGroupIdIsNotNull() {
      addCriterion("GROUP_ID is not null");
      return this;
    }

    public Criteria andGroupIdEqualTo(String value) {
      addCriterion("GROUP_ID =", value, "groupId");
      return this;
    }

    public Criteria andGroupIdNotEqualTo(String value) {
      addCriterion("GROUP_ID <>", value, "groupId");
      return this;
    }

    public Criteria andGroupIdGreaterThan(String value) {
      addCriterion("GROUP_ID >", value, "groupId");
      return this;
    }

    public Criteria andGroupIdGreaterThanOrEqualTo(String value) {
      addCriterion("GROUP_ID >=", value, "groupId");
      return this;
    }

    public Criteria andGroupIdLessThan(String value) {
      addCriterion("GROUP_ID <", value, "groupId");
      return this;
    }

    public Criteria andGroupIdLessThanOrEqualTo(String value) {
      addCriterion("GROUP_ID <=", value, "groupId");
      return this;
    }

    public Criteria andGroupIdLike(String value) {
      addCriterion("GROUP_ID like", value, "groupId");
      return this;
    }

    public Criteria andGroupIdNotLike(String value) {
      addCriterion("GROUP_ID not like", value, "groupId");
      return this;
    }

    public Criteria andGroupIdIn(List values) {
      addCriterion("GROUP_ID in", values, "groupId");
      return this;
    }

    public Criteria andGroupIdNotIn(List values) {
      addCriterion("GROUP_ID not in", values, "groupId");
      return this;
    }

    public Criteria andGroupIdBetween(String value1, String value2) {
      addCriterion("GROUP_ID between", value1, value2, "groupId");
      return this;
    }

    public Criteria andGroupIdNotBetween(String value1, String value2) {
      addCriterion("GROUP_ID not between", value1, value2, "groupId");
      return this;
    }

    public Criteria andNameIsNull() {
      addCriterion("NAME is null");
      return this;
    }

    public Criteria andNameIsNotNull() {
      addCriterion("NAME is not null");
      return this;
    }

    public Criteria andNameEqualTo(String value) {
      addCriterion("NAME =", value, "name");
      return this;
    }

    public Criteria andNameNotEqualTo(String value) {
      addCriterion("NAME <>", value, "name");
      return this;
    }

    public Criteria andNameGreaterThan(String value) {
      addCriterion("NAME >", value, "name");
      return this;
    }

    public Criteria andNameGreaterThanOrEqualTo(String value) {
      addCriterion("NAME >=", value, "name");
      return this;
    }

    public Criteria andNameLessThan(String value) {
      addCriterion("NAME <", value, "name");
      return this;
    }

    public Criteria andNameLessThanOrEqualTo(String value) {
      addCriterion("NAME <=", value, "name");
      return this;
    }

    public Criteria andNameLike(String value) {
      addCriterion("NAME like", value, "name");
      return this;
    }

    public Criteria andNameNotLike(String value) {
      addCriterion("NAME not like", value, "name");
      return this;
    }

    public Criteria andNameIn(List values) {
      addCriterion("NAME in", values, "name");
      return this;
    }

    public Criteria andNameNotIn(List values) {
      addCriterion("NAME not in", values, "name");
      return this;
    }

    public Criteria andNameBetween(String value1, String value2) {
      addCriterion("NAME between", value1, value2, "name");
      return this;
    }

    public Criteria andNameNotBetween(String value1, String value2) {
      addCriterion("NAME not between", value1, value2, "name");
      return this;
    }

    public Criteria andRemarkIsNull() {
      addCriterion("REMARK is null");
      return this;
    }

    public Criteria andRemarkIsNotNull() {
      addCriterion("REMARK is not null");
      return this;
    }

    public Criteria andRemarkEqualTo(String value) {
      addCriterion("REMARK =", value, "remark");
      return this;
    }

    public Criteria andRemarkNotEqualTo(String value) {
      addCriterion("REMARK <>", value, "remark");
      return this;
    }

    public Criteria andRemarkGreaterThan(String value) {
      addCriterion("REMARK >", value, "remark");
      return this;
    }

    public Criteria andRemarkGreaterThanOrEqualTo(String value) {
      addCriterion("REMARK >=", value, "remark");
      return this;
    }

    public Criteria andRemarkLessThan(String value) {
      addCriterion("REMARK <", value, "remark");
      return this;
    }

    public Criteria andRemarkLessThanOrEqualTo(String value) {
      addCriterion("REMARK <=", value, "remark");
      return this;
    }

    public Criteria andRemarkLike(String value) {
      addCriterion("REMARK like", value, "remark");
      return this;
    }

    public Criteria andRemarkNotLike(String value) {
      addCriterion("REMARK not like", value, "remark");
      return this;
    }

    public Criteria andRemarkIn(List values) {
      addCriterion("REMARK in", values, "remark");
      return this;
    }

    public Criteria andRemarkNotIn(List values) {
      addCriterion("REMARK not in", values, "remark");
      return this;
    }

    public Criteria andRemarkBetween(String value1, String value2) {
      addCriterion("REMARK between", value1, value2, "remark");
      return this;
    }

    public Criteria andRemarkNotBetween(String value1, String value2) {
      addCriterion("REMARK not between", value1, value2, "remark");
      return this;
    }
  }
}